class Solution {
    public boolean parseBoolExpr(String expression) {
        Stack<Character> stack = new Stack<>();
        int n = expression.length();

        for (int i = 0; i < n; i++) {
            char ch = expression.charAt(i);
            if (ch == ')') {
                ArrayList<Character> temp = new ArrayList<>();
                while (stack.peek() != '(') {
                    temp.add(stack.pop());
                }
                stack.pop();
                char operator = stack.pop();
                char res = evaluate(temp, operator);
                stack.push(res);
            } else {
                if (ch != ',') {
                    stack.push(ch);
                }
            }
        }
        return stack.peek() == 't';
    }

    public char evaluate(ArrayList<Character> list, char op) {
        if (op == '&') {
            if (isfound(list, 'f')) {
                return 'f';
            } else {
                return 't';
            }
        } else if (op == '|') {
            if (isfound(list, 't')) {
                return 't';
            } else {
                return 'f';
            }
        } else {
            return list.get(0) == 'f' ? 't' : 'f';
        }
    }

    public boolean isfound(ArrayList<Character> list, char val) {
        for (char ch : list) {
            if (ch == val) {
                return true;
            }
        }
        return false;
    }
}
