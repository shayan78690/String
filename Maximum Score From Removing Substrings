class Solution {
    char str[];

       public int removeSubstring(String pair, int score) {
        int total_score = 0;
        Stack<Character> stack = new Stack<>();
        char firstChar = pair.charAt(0);
        char secondChar = pair.charAt(1);

        for(char ch : str) {
            if(ch == secondChar && !stack.isEmpty() && stack.peek() == firstChar) {
                total_score += score;
                stack.pop();
            } else {
                stack.push(ch);
            }
        }
        int ind = stack.size();
        str = new char[ind];
        for(int i = ind-1; i >= 0; i--) {
            str[i] = stack.pop();
        }
        return total_score;
    }
    public int maximumGain(String s, int x, int y) {
    str = new char[s.length()];
    for(int i = 0; i < s.length(); i++) {
        str[i] = s.charAt(i);
    }
    String firstPair = (x > y)? "ab" : "ba";
    String secondPair = (firstPair.equals("ab"))? "ba" : "ab";

    int score = 0;
    score = removeSubstring(firstPair, Math.max(x, y));
    score += removeSubstring(secondPair, Math.min(x, y));

    return score;        
    }
}
